## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

""" @model """
type Comment {
  _id: GraphbackObjectID!
  text: String
  description: String

  """@manyToOne(field: 'comments', key: 'noteId')"""
  note: Note
}

input CommentFilter {
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
  noteId: GraphbackObjectIDInput
  and: [CommentFilter!]
  or: [CommentFilter!]
  not: CommentFilter
}

type CommentResultList {
  items: [Comment]!
  offset: Int
  limit: Int
  count: Int
}

input CommentSubscriptionFilter {
  and: [CommentSubscriptionFilter!]
  or: [CommentSubscriptionFilter!]
  not: CommentSubscriptionFilter
  _id: GraphbackObjectIDInput
  text: StringInput
  description: StringInput
}

input CreateCommentInput {
  text: String
  description: String
  noteId: GraphbackObjectID
}

input CreateMessageInput {
  user: String!
  createdAt: Time!
  text: String!
}

input CreateNoteInput {
  sender: String
  text: String
  created_at: Time
}

input CreateUsersInput {
  name: String
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

""" @model """
type Message {
  _id: GraphbackObjectID!
  user: String!
  createdAt: Time!
  text: String!
}

input MessageFilter {
  _id: GraphbackObjectIDInput
  user: StringInput
  createdAt: TimeInput
  text: StringInput
  and: [MessageFilter!]
  or: [MessageFilter!]
  not: MessageFilter
}

type MessageResultList {
  items: [Message]!
  offset: Int
  limit: Int
  count: Int
}

input MessageSubscriptionFilter {
  and: [MessageSubscriptionFilter!]
  or: [MessageSubscriptionFilter!]
  not: MessageSubscriptionFilter
  _id: GraphbackObjectIDInput
  user: StringInput
  createdAt: TimeInput
  text: StringInput
}

input MutateCommentInput {
  _id: GraphbackObjectID!
  text: String
  description: String
  noteId: GraphbackObjectID
}

input MutateMessageInput {
  _id: GraphbackObjectID!
  user: String
  createdAt: Time
  text: String
}

input MutateNoteInput {
  _id: GraphbackObjectID!
  sender: String
  text: String
  created_at: Time
}

input MutateUsersInput {
  _id: GraphbackObjectID!
  name: String
}

type Mutation {
  createNote(input: CreateNoteInput!): Note
  updateNote(input: MutateNoteInput!): Note
  deleteNote(input: MutateNoteInput!): Note
  createUsers(input: CreateUsersInput!): Users
  updateUsers(input: MutateUsersInput!): Users
  deleteUsers(input: MutateUsersInput!): Users
  createMessage(input: CreateMessageInput!): Message
  updateMessage(input: MutateMessageInput!): Message
  deleteMessage(input: MutateMessageInput!): Message
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: MutateCommentInput!): Comment
  deleteComment(input: MutateCommentInput!): Comment
}

""" @model """
type Note {
  _id: GraphbackObjectID!
  sender: String
  text: String
  created_at: Time

  """
  @oneToMany(field: 'note', key: 'noteId')
  @oneToMany(field: 'note')
  """
  comments(filter: CommentFilter): [Comment]!
}

input NoteFilter {
  _id: GraphbackObjectIDInput
  sender: StringInput
  text: StringInput
  created_at: TimeInput
  and: [NoteFilter!]
  or: [NoteFilter!]
  not: NoteFilter
}

type NoteResultList {
  items: [Note]!
  offset: Int
  limit: Int
  count: Int
}

input NoteSubscriptionFilter {
  and: [NoteSubscriptionFilter!]
  or: [NoteSubscriptionFilter!]
  not: NoteSubscriptionFilter
  _id: GraphbackObjectIDInput
  sender: StringInput
  text: StringInput
  created_at: TimeInput
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getDraftNotes: [Note]
  getNote(id: GraphbackObjectID!): Note
  findNotes(filter: NoteFilter, page: PageRequest, orderBy: OrderByInput): NoteResultList!
  getUsers(id: GraphbackObjectID!): Users
  findUsers(filter: UsersFilter, page: PageRequest, orderBy: OrderByInput): UsersResultList!
  getMessage(id: GraphbackObjectID!): Message
  findMessages(filter: MessageFilter, page: PageRequest, orderBy: OrderByInput): MessageResultList!
  getComment(id: GraphbackObjectID!): Comment
  findComments(filter: CommentFilter, page: PageRequest, orderBy: OrderByInput): CommentResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newNote(filter: NoteSubscriptionFilter): Note!
  updatedNote(filter: NoteSubscriptionFilter): Note!
  deletedNote(filter: NoteSubscriptionFilter): Note!
  newUsers(filter: UsersSubscriptionFilter): Users!
  updatedUsers(filter: UsersSubscriptionFilter): Users!
  deletedUsers(filter: UsersSubscriptionFilter): Users!
  newMessage(filter: MessageSubscriptionFilter): Message!
  updatedMessage(filter: MessageSubscriptionFilter): Message!
  deletedMessage(filter: MessageSubscriptionFilter): Message!
  newComment(filter: CommentSubscriptionFilter): Comment!
  updatedComment(filter: CommentSubscriptionFilter): Comment!
  deletedComment(filter: CommentSubscriptionFilter): Comment!
}

scalar Time

input TimeInput {
  ne: Time
  eq: Time
  le: Time
  lt: Time
  ge: Time
  gt: Time
  in: [Time!]
  between: [Time!]
}

""" @model """
type Users {
  _id: GraphbackObjectID!
  name: String
}

input UsersFilter {
  _id: GraphbackObjectIDInput
  name: StringInput
  and: [UsersFilter!]
  or: [UsersFilter!]
  not: UsersFilter
}

type UsersResultList {
  items: [Users]!
  offset: Int
  limit: Int
  count: Int
}

input UsersSubscriptionFilter {
  and: [UsersSubscriptionFilter!]
  or: [UsersSubscriptionFilter!]
  not: UsersSubscriptionFilter
  _id: GraphbackObjectIDInput
  name: StringInput
}